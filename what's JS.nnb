{
    "cells": [
        {
            "language": "markdown",
            "source": [
                "# js 是如何执行的\n\n\n## 分词/词法分析\n\n> 源码位置\n> https://github.com/v8/v8/blob/main/src/parsing/scanner.cc\n\n- 将字符串分解成有意义的代码块，这些代码块被称为词法单元\n- 例如：var a = 2; 将被分解为 var、a、=、2、;\n- 分词器会忽略空格和换行符\n- 词法单元是由一种数据结构组成，称为词法单元流\n- 词法单元流是一个由一个个词法单元组成的数组\n- 词法单元流是由分词器生成的\n- 词法单元流是一个有序的数组\n\n举例：\n```js\nvar a = 0;\nfunction foo() {\n    const b = \"2\"\n    console.log(a + b);\n    return [a, b, {a, b}];\n}\n\nfoo();\n```\n词法分析如下：\n```js\n[\n    \"var\", \"a\", \"=\", \"0\", \";\",\n    \"function\", \"foo\", \"(\", \")\", \"{\",\n    \"const\", \"b\", \"=\", \"\\\"2\\\"\", \";\",\n    \"console\", \".\", \"log\", \"(\", \"a\", \"+\", \"b\", \")\", \";\",\n    \"return\", \"[\", \"a\", \",\", \"b\", \",\", \"{\", \"a\", \",\", \"b\", \"}\", \"]\", \";\",\n    \"}\", \"foo\", \"(\", \")\", \";\"\n]\n```\n\n验证：\n\n> node 21\n\n```js\nconst acorn = require(\"acorn\");\nconst tokens = acorn.tokenizer(`\nvar a = 0;\nfunction foo() {\n    const b = \"2\";\n    console.log(a + b);\n    return [a, b, {a, b}];\n}\nfoo();\n`);\n\nlet tokenArray = [];\nwhile (true) {\n    const token = tokens.getToken();\n    if (token.type.label === \"eof\") break;\n    tokenArray.push(token.value || token.type.label);\n}\nconsole.log(tokens)\nconsole.log(tokenArray);\n\n// output：\n[\n    'var',    'a',        '=',     'num',\n    ';',      'function', 'foo',   '(',\n    ')',      '{',        'const', 'b',\n    '=',      '2',        ';',     'console',\n    '.',      'log',      '(',     'a',\n    '+',      'b',        ')',     ';',\n    'return', '[',        'a',     ',',\n    'b',      ',',        '{',     'a',\n    ',',      'b',        '}',     ']',\n    ';',      '}',        'foo',   '(',\n    ')',      ';'\n]\n```\n\n可以发现 acorn 生成的 token 与我们手动分词的结果基本一致。\n但是 0 被转为 num 。\n\n## 解析/语法分析\n\n> 源码位置\n> https://github.com/v8/v8/blob/main/src/ast/ast.cc\n\n- 将词法单元流转换为抽象语法树（AST）\n- AST 是一个由节点组成的树状结构\n- AST 是由解析器生成的\n- AST 生成的同时，会进行Scope Analysis\n- Scope Analysis 会生成一个 Scope Tree，用于表示变量的作用域\n- Scope Analysis 会提升变量的声明，将变量声明提升到作用域的顶部\n- Scope Analysis 会将变量的引用与声明关联起来，\n\n举例：\n```js\nvar a = 0;\nfunction foo() {\n    const b = \"2\"\n    console.log(a + b);\n    return [a, b, {a, b}];\n}\n\nfoo();\n```\n"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "// 验证\nconst acorn = require(\"acorn\");\nconst code = `\nvar a = 0;\nfunction foo() {\n    const b = \"2\";\n    console.log(a + b);\n    return [a, b, {a, b}];\n}\nfoo();\n`;\nconst tokens = acorn.tokenizer(code);\n\nlet tokenArray = [];\nwhile (true) {\n  const token = tokens.getToken();\n  if (token.type.label === \"eof\") break;\n  tokenArray.push(token.value || token.type.label);\n}\n\nconsole.log(tokenArray);\n\nconst ast = acorn.parse(code, { ecmaVersion: 2020 });\nconsole.log(JSON.stringify(ast, null, 2));\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "字段注释\n```code\n// 顶层结构\ntype: 节点类型\n    Program: 表示程序\n    VariableDeclaration: 表示变量声明\n    FunctionDeclaration: 函数声明\n        expression\n        generator: 回调函数是生成表达式。\n        async\n        params: 函数参数数组，这里为空数组表示无参数。\n        body: 函数体\n    ExpressionStatement: 表达式\n    BlockStatement: 块表达式\n        body: 包含语句块内语句的数组。\n    CallExpression: 函数调用\n        callee: 被调用的函数\n        arguments: 参数\n    MemberExpression: 对象访问的属性\n    Property: \n        描述对象的各种特性\n    BinaryExpression: 二次元表达式\n        left\n        operator\n        right\n    ReturnStatement: 返回值\n    ObjectExpression: 对象表达式\n    ArrayExpression\n    ...\n\nstart: 节点在源代码中的起始位置（字符索引）。\nend: 节点在源代码中的结束位置（字符索引）。\nbody: 包含程序主体的数组，每个元素代表一个语句或声明。\ndeclarations: 包含一个或多个变量声明的数组。\nkind: 变量类型\n    const\n    let\n    var\n    init: 初始化属性\n\n```\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## AST 优化\n\n- AST 优化是一个可选的步骤\n\n\n### 基本转换、优化步骤\n\n1 语法树遍历\n引擎会遍历AST节点，并根据特定规则进行转换。例如，某些语法糖（如箭头函数、解构赋值等）会被转换成更基本的结构。\n\n2 内联扩展（Inlining）\n内联扩展是一种优化技术，将被频繁调用的小函数的代码内联到调用处，减少函数调用开销。\n\n3 恒值折叠（Constant Folding）\n在这个阶段，编译器会计算可以在编译时确定的常量表达式。例如，将2 + 2直接替换为4。\n\n4 死代码消除（Dead Code Elimination）\n编译器会删除那些永远不会被执行的代码。例如，if (false) { ... }内的代码块会被移除。\n\n5 Intermediate Representation 生成与优化\n   内联、恒值折叠和死代码消除等优化步骤会生成一个更高级的中间表示（IR）。\n...\n\n### 工具\n\nhttps://astexplorer.net/\n\n## 代码生成\n\n- 将优化后的AST转换为机器码\n- 机器码是一种可以被计算机直接执行的代码"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "\n# js 中高大上的专有名词 （术语）\n\n## 词法作用域\n\n- 词法作用域是指在代码编写时定义的作用域\n- 词法作用域是由代码的结构决定的\n- 词法作用域是静态的，不会随着代码的执行而改变"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "var a = 0;\nfunction foo() {\n  console.log('i can to access a:', a);\n}\nfoo();\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "i can to access a: 0",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "## 函数（动态）作用域\n\n- 函数作用域是指在函数调用时定义的作用域\n- 函数作用域是由函数的调用决定的\n- 函数作用域是动态的，会随着函数的调用而改变"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                ""
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## 作用域链\n\n- 作用域链是一个由作用域组成的链表\n- 作用域链是由作用域嵌套关系决定的"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "var a = 0;\nvar global = \"www\"\nfunction foo() {\n    var b = 1;\n    global = \"inside foo\"\n    function bar() {\n        var c = 2;\n        var global = \"inside bar\"\n        console.log(a, b, c, global);\n    }\n    console.log('bar before:', global)\n    bar();\n    console.log('bar after:', global)\n}\nconsole.log('foo before:', global)\nfoo();\nconsole.log('foo after:', global)\n// foo 通过作用域链，更改了全局变量 global 的值\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "foo before: www",
                                "bar before: inside foo",
                                "0 1 2 inside bar",
                                "bar after: inside foo",
                                "foo after: inside foo",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "## 闭包\n\n- 闭包是指一个函数和其相关的引用环境\n- 闭包可以访问其引用环境中的变量\n\n"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "function createCounter() {\n  let count = 0;\n  return function () {\n    return count++;\n  };\n}\n\nconst counter = createCounter();\nconsole.log(counter()); // 输出 0\nconsole.log(counter()); // 输出 1\nconsole.log(counter()); // 输出 2\n\n// 闭包的应用场景\n// 1. 封装私有（实例私有、函数私有）变量\n// 2. 模块化\n\nfunction loadData(url, callback) {\n  // 假设这里是一个异步请求\n  // ...\n\n  // 模拟异步结果\n  setTimeout(() => {\n    const data = \"Data from \" + url;\n    callback(data);\n  }, 1000);\n}\n\nfunction processData(data) {\n  console.log(data);\n}\n\n// 使用闭包确保每次请求使用正确的回调函数\nfunction getDataForUrl(url) {\n  return function (callback) {\n    loadData(url, callback);\n  };\n}\n\n// 调用示例\ngetDataForUrl(\"https://example.com\")(processData);\ngetDataForUrl(\"https://another-example.com\")(processData);\n\n\n// 闭包的缺点\n// 1. 会造成内存泄漏\n// 举例：\n// 上面的 count 变量，因为闭包引用了 count 变量，导致 count 变量无法被垃圾回收机制回收\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "0",
                                "1",
                                "2",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                ""
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "Since Acorn 8.0.0, options.ecmaVersion is required.",
                                "Defaulting to 2020, but this will stop working in the future.",
                                "{",
                                "  \"type\": \"Program\",",
                                "  \"start\": 0,",
                                "  \"end\": 108,",
                                "  \"body\": [",
                                "    {",
                                "      \"type\": \"VariableDeclaration\",",
                                "      \"start\": 1,",
                                "      \"end\": 11,",
                                "      \"declarations\": [",
                                "        {",
                                "          \"type\": \"VariableDeclarator\",",
                                "          \"start\": 5,",
                                "          \"end\": 10,",
                                "          \"id\": {",
                                "            \"type\": \"Identifier\",",
                                "            \"start\": 5,",
                                "            \"end\": 6,",
                                "            \"name\": \"a\"",
                                "          },",
                                "          \"init\": {",
                                "            \"type\": \"Literal\",",
                                "            \"start\": 9,",
                                "            \"end\": 10,",
                                "            \"value\": 0,",
                                "            \"raw\": \"0\"",
                                "          }",
                                "        }",
                                "      ],",
                                "      \"kind\": \"var\"",
                                "    },",
                                "    {",
                                "      \"type\": \"FunctionDeclaration\",",
                                "      \"start\": 12,",
                                "      \"end\": 100,",
                                "      \"id\": {",
                                "        \"type\": \"Identifier\",",
                                "        \"start\": 21,",
                                "        \"end\": 24,",
                                "        \"name\": \"foo\"",
                                "      },",
                                "      \"expression\": false,",
                                "      \"generator\": false,",
                                "      \"async\": false,",
                                "      \"params\": [],",
                                "      \"body\": {",
                                "        \"type\": \"BlockStatement\",",
                                "        \"start\": 27,",
                                "        \"end\": 100,",
                                "        \"body\": [",
                                "          {",
                                "            \"type\": \"VariableDeclaration\",",
                                "            \"start\": 33,",
                                "            \"end\": 47,",
                                "            \"declarations\": [",
                                "              {",
                                "                \"type\": \"VariableDeclarator\",",
                                "                \"start\": 39,",
                                "                \"end\": 46,",
                                "                \"id\": {",
                                "                  \"type\": \"Identifier\",",
                                "                  \"start\": 39,",
                                "                  \"end\": 40,",
                                "                  \"name\": \"b\"",
                                "                },",
                                "                \"init\": {",
                                "                  \"type\": \"Literal\",",
                                "                  \"start\": 43,",
                                "                  \"end\": 46,",
                                "                  \"value\": \"2\",",
                                "                  \"raw\": \"\\\"2\\\"\"",
                                "                }",
                                "              }",
                                "            ],",
                                "            \"kind\": \"const\"",
                                "          },",
                                "          {",
                                "            \"type\": \"ExpressionStatement\",",
                                "            \"start\": 52,",
                                "            \"end\": 71,",
                                "            \"expression\": {",
                                "              \"type\": \"CallExpression\",",
                                "              \"start\": 52,",
                                "              \"end\": 70,",
                                "              \"callee\": {",
                                "                \"type\": \"MemberExpression\",",
                                "                \"start\": 52,",
                                "                \"end\": 63,",
                                "                \"object\": {",
                                "                  \"type\": \"Identifier\",",
                                "                  \"start\": 52,",
                                "                  \"end\": 59,",
                                "                  \"name\": \"console\"",
                                "                },",
                                "                \"property\": {",
                                "                  \"type\": \"Identifier\",",
                                "                  \"start\": 60,",
                                "                  \"end\": 63,",
                                "                  \"name\": \"log\"",
                                "                },",
                                "                \"computed\": false,",
                                "                \"optional\": false",
                                "              },",
                                "              \"arguments\": [",
                                "                {",
                                "                  \"type\": \"BinaryExpression\",",
                                "                  \"start\": 64,",
                                "                  \"end\": 69,",
                                "                  \"left\": {",
                                "                    \"type\": \"Identifier\",",
                                "                    \"start\": 64,",
                                "                    \"end\": 65,",
                                "                    \"name\": \"a\"",
                                "                  },",
                                "                  \"operator\": \"+\",",
                                "                  \"right\": {",
                                "                    \"type\": \"Identifier\",",
                                "                    \"start\": 68,",
                                "                    \"end\": 69,",
                                "                    \"name\": \"b\"",
                                "                  }",
                                "                }",
                                "              ],",
                                "              \"optional\": false",
                                "            }",
                                "          },",
                                "          {",
                                "            \"type\": \"ReturnStatement\",",
                                "            \"start\": 76,",
                                "            \"end\": 98,",
                                "            \"argument\": {",
                                "              \"type\": \"ArrayExpression\",",
                                "              \"start\": 83,",
                                "              \"end\": 97,",
                                "              \"elements\": [",
                                "                {",
                                "                  \"type\": \"Identifier\",",
                                "                  \"start\": 84,",
                                "                  \"end\": 85,",
                                "                  \"name\": \"a\"",
                                "                },",
                                "                {",
                                "                  \"type\": \"Identifier\",",
                                "                  \"start\": 87,",
                                "                  \"end\": 88,",
                                "                  \"name\": \"b\"",
                                "                },",
                                "                {",
                                "                  \"type\": \"ObjectExpression\",",
                                "                  \"start\": 90,",
                                "                  \"end\": 96,",
                                "                  \"properties\": [",
                                "                    {",
                                "                      \"type\": \"Property\",",
                                "                      \"start\": 91,",
                                "                      \"end\": 92,",
                                "                      \"method\": false,",
                                "                      \"shorthand\": true,",
                                "                      \"computed\": false,",
                                "                      \"key\": {",
                                "                        \"type\": \"Identifier\",",
                                "                        \"start\": 91,",
                                "                        \"end\": 92,",
                                "                        \"name\": \"a\"",
                                "                      },",
                                "                      \"kind\": \"init\",",
                                "                      \"value\": {",
                                "                        \"type\": \"Identifier\",",
                                "                        \"start\": 91,",
                                "                        \"end\": 92,",
                                "                        \"name\": \"a\"",
                                "                      }",
                                "                    },",
                                "                    {",
                                "                      \"type\": \"Property\",",
                                "                      \"start\": 94,",
                                "                      \"end\": 95,",
                                "                      \"method\": false,",
                                "                      \"shorthand\": true,",
                                "                      \"computed\": false,",
                                "                      \"key\": {",
                                "                        \"type\": \"Identifier\",",
                                "                        \"start\": 94,",
                                "                        \"end\": 95,",
                                "                        \"name\": \"b\"",
                                "                      },",
                                "                      \"kind\": \"init\",",
                                "                      \"value\": {",
                                "                        \"type\": \"Identifier\",",
                                "                        \"start\": 94,",
                                "                        \"end\": 95,",
                                "                        \"name\": \"b\"",
                                "                      }",
                                "                    }",
                                "                  ]",
                                "                }",
                                "              ]",
                                "            }",
                                "          }",
                                "        ]",
                                "      }",
                                "    },",
                                "    {",
                                "      \"type\": \"ExpressionStatement\",",
                                "      \"start\": 101,",
                                "      \"end\": 107,",
                                "      \"expression\": {",
                                "        \"type\": \"CallExpression\",",
                                "        \"start\": 101,",
                                "        \"end\": 106,",
                                "        \"callee\": {",
                                "          \"type\": \"Identifier\",",
                                "          \"start\": 101,",
                                "          \"end\": 104,",
                                "          \"name\": \"foo\"",
                                "        },",
                                "        \"arguments\": [],",
                                "        \"optional\": false",
                                "      }",
                                "    }",
                                "  ],",
                                "  \"sourceType\": \"script\"",
                                "}",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "[",
                                "  'var',    'a',        '=',     'num',",
                                "  ';',      'function', 'foo',   '(',",
                                "  ')',      '{',        'const', 'b',",
                                "  '=',      '2',        ';',     'console',",
                                "  '.',      'log',      '(',     'a',",
                                "  '+',      'b',        ')',     ';',",
                                "  'return', '[',        'a',     ',',",
                                "  'b',      ',',        '{',     'a',",
                                "  ',',      'b',        '}',     ']',",
                                "  ';',      '}',        'foo',   '(',",
                                "  ')',      ';'",
                                "]",
                                ""
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}