{
    "cells": [
        {
            "language": "markdown",
            "source": [
                "## 词法作用域\n\n- 词法作用域是指在代码编写时定义的作用域\n- 词法作用域是由代码的结构决定的\n- 词法作用域是静态的，不会随着代码的执行而改变"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "var a = 0;\nfunction foo() {\n  console.log('i can to access a:', a);\n}\nfoo();\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "i can to access a: 0",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "## 函数（动态）作用域\n\n- 函数作用域是指在函数调用时定义的作用域\n- 函数作用域是由函数的调用决定的\n- 函数作用域是动态的，会随着函数的调用而改变"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                ""
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## 作用域链\n\n- 作用域链是一个由作用域组成的链表\n- 作用域链是由作用域嵌套关系决定的"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "var a = 0;\nvar global = \"www\"\nfunction foo() {\n    var b = 1;\n    global = \"inside foo\"\n    function bar() {\n        var c = 2;\n        var global = \"inside bar\"\n        console.log(a, b, c, global);\n    }\n    console.log('bar before:', global)\n    bar();\n    console.log('bar after:', global)\n}\nconsole.log('foo before:', global)\nfoo();\nconsole.log('foo after:', global)\n// foo 通过作用域链，更改了全局变量 global 的值\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "foo before: www",
                                "bar before: inside foo",
                                "0 1 2 inside bar",
                                "bar after: inside foo",
                                "foo after: inside foo",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "## 闭包\n\n- 闭包是指一个函数和其相关的引用环境\n- 闭包可以访问其引用环境中的变量\n\n"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "function createCounter() {\n  let count = 0;\n  return function () {\n    return count++;\n  };\n}\n\nconst counter = createCounter();\nconsole.log(counter()); // 输出 0\nconsole.log(counter()); // 输出 1\nconsole.log(counter()); // 输出 2\n\n// 闭包的应用场景\n// 1. 封装私有（实例私有、函数私有）变量\n// 2. 模块化\n\nfunction loadData(url, callback) {\n  // 假设这里是一个异步请求\n  // ...\n\n  // 模拟异步结果\n  setTimeout(() => {\n    const data = \"Data from \" + url;\n    callback(data);\n  }, 1000);\n}\n\nfunction processData(data) {\n  console.log(data);\n}\n\n// 使用闭包确保每次请求使用正确的回调函数\nfunction getDataForUrl(url) {\n  return function (callback) {\n    loadData(url, callback);\n  };\n}\n\n// 调用示例\ngetDataForUrl(\"https://example.com\")(processData);\ngetDataForUrl(\"https://another-example.com\")(processData);\n\n\n// 闭包的缺点\n// 1. 会造成内存泄漏\n// 举例：\n// 上面的 count 变量，因为闭包引用了 count 变量，导致 count 变量无法被垃圾回收机制回收\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "0",
                                "1",
                                "2",
                                ""
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}